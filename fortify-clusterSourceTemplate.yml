apiVersion: carto.run/v1alpha1
kind: ClusterSourceTemplate
metadata:
  name: fortify-template
spec:

  # We have to use `ytt` instead of `template` so we can fetch variables from Cartographer.
  ytt: |
    #@ load("@ytt:data", "data")
    apiVersion: tekton.dev/v1beta1
    kind: PipelineRun
    metadata:
      generateName: fortify-pipeline-run-
    spec:
      workspaces:
      - name: tmp-workspace
        volumeClaimTemplate:
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 256Mi
      pipelineRef:
        name: fortify-pipeline
      params:
        - name: repository
          value: #@ data.values.source.url
        - name: revision
          value: #@ data.values.source.revision
        - name: workload
          value: #@ data.values.workload.metadata.name


  # We're not changing anything (only scanning), so the output is the same as the input.
  # NOTE: this will be found in the TaskRun that is automatically created. To observe,
  # look in your cluster for a TaskRun while the SupplyChain is running.
  urlPath: .status.pipelineSpec.tasks[0].params[0].value
  revisionPath: .status.pipelineSpec.tasks[0].params[1].value
  lifecycle: tekton
